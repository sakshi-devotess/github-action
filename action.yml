name: 'Check Branch Protection'
description: 'Verify that branch protection is set and includes the current job'
inputs:
  repository:
    description: 'The repository to check for branch protection'
    required: true
  token:
    description: 'GitHub token to authenticate'
    required: true
  branches:
    description: 'Comma-separated list of branches to check for branch protection'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Parse Branches and Check Protection
      shell: bash
      run: |
          echo "Checking account type..."

          RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --location "https://api.github.com/user" \
            --header 'Accept: application/vnd.github+json' \
            --header "Authorization: Bearer ${{ inputs.token }}")

          BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')
          STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$STATUS" -eq 200 ]; then
            ACCOUNT_TYPE=$(echo "$BODY" | jq -r '.type')
            echo "Account Type: $ACCOUNT_TYPE"

            if [ "$ACCOUNT_TYPE" != "Pro" ]; then
              echo "::set-output name=run_prettier::false"
              echo "This is not a Pro account. Skipping branch protection rules and Prettier run."
              exit 0
            fi

            echo "Checking branch protection rules..."
            RULE_COUNT=$(curl --silent --location "https://api.github.com/repos/${{ github.repository }}/branches/main/protection" \
              --header 'Accept: application/vnd.github+json' \
              --header "Authorization: Bearer ${{ inputs.token }}" | jq '.required_status_checks.contexts | length')

            echo "Branch protection rules count: $RULE_COUNT"

            if [ "$RULE_COUNT" -lt 3 ]; then
              echo "::set-output name=run_prettier::false"
              echo "Branch protection does not have at least 3 rules. Skipping Prettier run."
              exit 0
            fi

            echo "::set-output name=run_prettier::true"
          else
            echo "ERROR: Unable to determine account type or check rules. HTTP Status: $STATUS"
            exit 1
          fi
      # run: |
      #   # Get the input branches and split into an array
      #   IFS=',' read -r -a BRANCHES <<< "${{ inputs.branches }}"
      #   ALL_PROTECTED=true

      #   for BRANCH in "${BRANCHES[@]}"; do
      #     echo "--------------------------------------"
      #     echo "Checking branch protection for: $BRANCH"
          
      #     # Fetch branch protection details
      #     RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
      #       --location "https://api.github.com/repos/${{ inputs.repository }}/branches/$BRANCH/protection" \
      #       --header 'Accept: application/vnd.github+json' \
      #       --header "Authorization: Bearer ${{ inputs.token }}")
          
      #     # Extract HTTP status and body
      #     BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
      #     STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

      #     echo "HTTP Status: $STATUS"
      #     echo "Response Body: $BODY"

      #     # Check if the branch exists and has protection
      #     if [ "$STATUS" -eq 404 ]; then
      #       echo "ERROR: Branch '$BRANCH' does not exist or does not have branch protection enabled."
      #       ALL_PROTECTED=false
      #     elif [ "$STATUS" -ne 200 ]; then
      #       echo "ERROR: Failed to fetch branch protection details for '$BRANCH': $BODY"
      #       ALL_PROTECTED=false
      #     else
      #       # Verify branch protection rules exist
      #       PROTECTION_ENABLED=$(echo "$BODY" | jq '.required_status_checks | .contexts | length > 3')
      #       if [ "$PROTECTION_ENABLED" = "false" ]; then
      #         echo "ERROR: Branch '$BRANCH' exists but does not have branch protection rules set."
      #         ALL_PROTECTED=false
      #       else
      #         echo "SUCCESS: Branch '$BRANCH' is protected."
      #       fi
      #     fi
      #     echo "--------------------------------------"
      #   done

      #   # Final check
      #   if [ "$ALL_PROTECTED" = false ]; then
      #     echo "ERROR: One or more branches do not exist or do not have branch protection enabled."
      #     exit 1
      #   fi

      #   echo "SUCCESS: All specified branches are protected."
