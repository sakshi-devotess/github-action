name: 'Check Branch Protection'
description: 'Verify that branch protection is set and includes the current job'
inputs:
  repository:
    description: 'The repository to check for branch protection'
    required: true
  token:
    description: 'GitHub token to authenticate'
    required: true
  branches:
    description: 'Comma-separated list of branches to check for branch protection'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Parse Branches and Check Protection
      shell: bash
      # run: |
          
      run: |
        # Fetch repository details
        REPO_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
          --location "https://api.github.com/repos/${{ inputs.repository }}" \
          --header 'Accept: application/vnd.github+json' \
          --header "Authorization: Bearer ${{ inputs.token }}")

        REPO_BODY=$(echo "$REPO_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
        REPO_STATUS=$(echo "$REPO_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

        if [ "$REPO_STATUS" -ne 200 ]; then
          echo "ERROR: Unable to fetch repository details: $REPO_BODY"
          exit 1
        fi

        # Extract owner type and plan
        OWNER_TYPE=$(echo "$REPO_BODY" | jq -r '.owner.type')
        OWNER_LOGIN=$(echo "$REPO_BODY" | jq -r '.owner.login')

        echo "Repository Owner: $OWNER_LOGIN"
        echo "Owner Type: $OWNER_TYPE"

        if [ "$OWNER_TYPE" = "Organization" ]; then
          # Fetch organization details
          ORG_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --location "https://api.github.com/orgs/$OWNER_LOGIN" \
            --header 'Accept: application/vnd.github+json' \
            --header "Authorization: Bearer ${{ inputs.token }}")

          ORG_BODY=$(echo "$ORG_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          ORG_STATUS=$(echo "$ORG_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$ORG_STATUS" -ne 200 ]; then
            echo "ERROR: Unable to fetch organization details: $ORG_BODY"
            exit 1
          fi

          PLAN=$(echo "$ORG_BODY" | jq -r '.plan.name')
        else
          # Fetch user details
          USER_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --location "https://api.github.com/users/$OWNER_LOGIN" \
            --header 'Accept: application/vnd.github+json' \
            --header "Authorization: Bearer ${{ inputs.token }}")

          USER_BODY=$(echo "$USER_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          USER_STATUS=$(echo "$USER_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$USER_STATUS" -ne 200 ]; then
            echo "ERROR: Unable to fetch user details: $USER_BODY"
            exit 1
          fi

          PLAN=$(echo "$USER_BODY" | jq -r '.plan.name')
        fi

        echo "Account Plan: $PLAN"

        if [ "$PLAN" = "free" ]; then
          echo "Account is on a Free plan. Skipping branch protection checks."
          exit 0
        else
          echo "Account is on a Pro or Enterprise plan. Proceeding with branch protection checks."
        fi
        

        # Get the input branches and split into an array
        IFS=',' read -r -a BRANCHES <<< "${{ inputs.branches }}"
        ALL_PROTECTED=true

        for BRANCH in "${BRANCHES[@]}"; do
          echo "--------------------------------------"
          echo "Checking branch protection for: $BRANCH"

          # Fetch branch protection details
          RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --location "https://api.github.com/repos/${{ inputs.repository }}/branches/$BRANCH/protection" \
            --header 'Accept: application/vnd.github+json' \
            --header "Authorization: Bearer ${{ inputs.token }}")

          # Extract HTTP status and body
          BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          echo "HTTP Status: $STATUS"
          echo "Response Body: $BODY"

          # Check if the branch exists and has protection
          if [ "$STATUS" -eq 404 ]; then
            echo "ERROR: Branch '$BRANCH' does not exist or does not have branch protection enabled."
            ALL_PROTECTED=false
          elif [ "$STATUS" -ne 200 ]; then
            echo "ERROR: Failed to fetch branch protection details for '$BRANCH': $BODY"
            ALL_PROTECTED=false
          else
            # Verify branch protection rules exist
            REQUIRED_CHECKS_COUNT=$(echo "$BODY" | jq '.required_status_checks | .contexts | length')
            echo "Required Status Checks Count: $REQUIRED_CHECKS_COUNT"

            if [ "$REQUIRED_CHECKS_COUNT" -lt 3 ]; then
              echo "ERROR: Branch '$BRANCH' does not have at least 3 required status checks. Found: $REQUIRED_CHECKS_COUNT."
              ALL_PROTECTED=false
            else
              echo "SUCCESS: Branch '$BRANCH' is protected with $REQUIRED_CHECKS_COUNT required status checks."
            fi
          fi
          echo "--------------------------------------"
        done

        # Final check
        if [ "$ALL_PROTECTED" = false ]; then
          echo "ERROR: One or more branches do not exist or do not have branch protection enabled."
          exit 1
        fi

        echo "SUCCESS: All specified branches are protected."
       
        
